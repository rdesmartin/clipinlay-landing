service: 'demo-frontend'

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: 'serverless-deployment-clipinlay'
  stackTags:
    Project: ${self:service}
    Stage: ${self:provider.stage}
    Provider: sls
    Owner: simon

custom:
  # S3 sync
  s3Sync:
    - bucketNameKey: WebsiteBucket
      bucketPrefix: ''
      localDir: build
      deleteRemoved: true
      acl: private
  # CloudFront invalidate cache
  cloudfrontInvalidate:
    distributionIdKey: CloudFrontDistribution
    items:
      - "/*"
  # CloudFormation
  viewer_certificate:
    prod:
      AcmCertificateArn: 'arn:aws:acm:us-east-1:323708347701:certificate/98044949-3d14-4e2a-8e1e-8242ce355f80'
      SslSupportMethod: sni-only
    stg:
      AcmCertificateArn: 'arn:aws:acm:us-east-1:323708347701:certificate/98044949-3d14-4e2a-8e1e-8242ce355f80'
      SslSupportMethod: sni-only
    default:
      CloudFrontDefaultCertificate: 'true'
  aliases:
    prod:
      - demo.clipinlay.com
    stg:
      - stg-demo.clipinlay.com
    default: []

resources:
  Conditions:
    IsProd:
      Fn::Equals:
        - ${self:provider.stage}
        - prod
    IsStg:
      Fn::Equals:
        - ${self:provider.stage}
        - stg
  Resources:
    # S3 Bucket
    WebsiteBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: clipinlay-${self:service}-${self:provider.stage}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - 'GET'
                - 'HEAD'
              AllowedOrigins:
                - '*'
              ExposedHeaders:
                - 'ETag'
                - 'Content-Length'
                - 'x-amz-meta-uuid'
                - 'x-amz-meta-md5'
              MaxAge: 3000
    # CloudFront
    OriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref WebsiteBucket
    CloudFrontDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Enabled: 'true'
          Origins:
            - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              Id: !Join ['', ['S3-', !Ref WebsiteBucket]]
              S3OriginConfig:
                OriginAccessIdentity:  !Join ['', ['origin-access-identity/cloudfront/', !Ref OriginAccessIdentity]]
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - OPTIONS
              - GET
              - HEAD
            CachedMethods:
              - OPTIONS
              - GET
              - HEAD
            TargetOriginId: !Join ['', ['S3-', !Ref WebsiteBucket]]
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          ViewerCertificate: ${self:custom.viewer_certificate.${self:provider.stage}, self:custom.viewer_certificate.default}
          Aliases: ${self:custom.aliases.${self:provider.stage}, self:custom.aliases.default}
    # S3 Bucket Policy
    WebsiteBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Id: WebsiteBucketPolicy
          Version: '2012-10-17'
          Statement:
            - Effect: Deny
              Action: '*'
              Principal: '*'
              Condition:
                Bool:
                  "aws:SecureTransport": false
              Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
            - Effect: Allow
              Action: 's3:GetObject'
              Principal:
                AWS: !Join ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', !Ref OriginAccessIdentity]]
              Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
    # Route53 Records
    ProdDomain:
      Type: "AWS::Route53::RecordSet"
      Condition: IsProd
      Properties:
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          # For CloudFront, HostedZoneId is always Z2FDTNDATAQYW2
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: clipinlay.com.
        Name: demo.clipinlay.com.
        Type: 'A'
    StgDomain:
      Type: "AWS::Route53::RecordSet"
      Condition: IsStg
      Properties:
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          # For CloudFront, HostedZoneId is always Z2FDTNDATAQYW2
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: clipinlay.com.
        Name: stg-demo.clipinlay.com.
        Type: 'A'
  Outputs:
    WebsiteBucket:
      Value: !Ref WebsiteBucket
    CloudFrontDistribution:
      Value: !Ref CloudFrontDistribution
    CloudFrontDomainName:
      Value: !GetAtt CloudFrontDistribution.DomainName
